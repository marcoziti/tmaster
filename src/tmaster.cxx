// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "tmaster.h"
/**
   0 - no start. start possible
   1 - running, stop possible
   2 - stopped, reset possible
*/
static int status = 0; 
static int curr_Elapsed = 0; 
static const int time_length = 2; // min

const int Get_NextAction(int s) {
  switch(s){
  	case 0: return 1;
  	case 1: return 2;
  	case 2: return 0;
  }
}

void Reset() {
  Fl::remove_timeout((Fl_Timeout_Handler)Timeout_Callback, NULL); 
  btn_CurrStatus->label("@+2>");
  
  status = 0;
  curr_Elapsed = 0;
  const int curr_Remaining = time_length * 60 - curr_Elapsed;
  
  ticker->value(0);
  int curr_Min = int(curr_Remaining / 60);
  int curr_Sec = int(curr_Remaining % 60);
  char buf[255];
  sprintf(buf, "%02d:%02d", curr_Min, curr_Sec);
  lbl_Remaining->copy_label(buf);
}

void Window_Callback(Fl_Widget*, void*) {
  if(!Fl::has_timeout((Fl_Timeout_Handler)Timeout_Callback, NULL))
  	Fl::remove_timeout((Fl_Timeout_Handler)Timeout_Callback, NULL);
}

void Widget_Callback(Fl_Widget*, void*) {
  const int i = status = Get_NextAction(status);
  if(1 == i){
  	// running
  		Fl::add_timeout(1, (Fl_Timeout_Handler)Timeout_Callback, NULL);
  	btn_CurrStatus->label("@+2||");
  }
  else{
  	if(2 == i) {
  		Fl::remove_timeout((Fl_Timeout_Handler)Timeout_Callback, NULL); 
  		btn_CurrStatus->label("@+2>|"); 
  	}
  	else 
  		Reset();
  }
}

void Timeout_Callback(Fl_Widget*, void*) {
  curr_Elapsed++;
  const int curr_Remaining = time_length * 60 - curr_Elapsed;
  if(0 >= curr_Remaining){
  	return Reset();
  }
  
  printf("\007");fflush(stdout);
  const float percent = 100 - curr_Remaining * 100/(time_length * 60);
  
  ticker->value(percent);
  int curr_Min = int(curr_Remaining / 60);
  int curr_Sec = int(curr_Remaining % 60);
  char buf[255];
  sprintf(buf, "%02d:%02d", curr_Min, curr_Sec);
  lbl_Remaining->copy_label(buf);
  Fl::repeat_timeout(1, (Fl_Timeout_Handler)Timeout_Callback, NULL);
}

Fl_Window *main_Window=(Fl_Window *)0;

Fl_Progress *ticker=(Fl_Progress *)0;

Fl_Button *btn_CurrStatus=(Fl_Button *)0;

Fl_Box *lbl_Remaining=(Fl_Box *)0;

int main(int argc, char **argv) {
  { main_Window = new Fl_Window(942, 62, "Master Your Time");
    main_Window->user_data((void*)("main_Window"));
    main_Window->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    { ticker = new Fl_Progress(120, 0, 825, 65);
      ticker->box(FL_FLAT_BOX);
      ticker->selection_color((Fl_Color)1);
      ticker->maximum(100);
      ticker->minimum(0);
    } // Fl_Progress* ticker
    { btn_CurrStatus = new Fl_Button(90, 0, 30, 65, "@>");
      btn_CurrStatus->tooltip("Start/Pause/Reset (Alt + S)");
      btn_CurrStatus->box(FL_FLAT_BOX);
      btn_CurrStatus->shortcut(0x80073);
      btn_CurrStatus->down_box(FL_FLAT_BOX);
      btn_CurrStatus->labelcolor((Fl_Color)4);
      btn_CurrStatus->callback((Fl_Callback*)Widget_Callback, (void*)("btn_CurrStatus"));
    } // Fl_Button* btn_CurrStatus
    { lbl_Remaining = new Fl_Box(2, 1, 88, 60, "label");
      lbl_Remaining->labeltype(FL_EMBOSSED_LABEL);
      lbl_Remaining->labelfont(1);
      lbl_Remaining->labelsize(34);
      lbl_Remaining->labelcolor((Fl_Color)4);
    } // Fl_Box* lbl_Remaining
    ticker->maximum(100);
    ticker->minimum(0);
    Reset();
    main_Window->set_non_modal();
    main_Window->end();
  } // Fl_Window* main_Window
  main_Window->show(argc, argv);
  return Fl::run();
}
